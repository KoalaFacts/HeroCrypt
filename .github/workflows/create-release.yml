name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., 1.0.0)'
        required: true
        type: string
      build-number:
        description: 'Build number to release (e.g., main-20241025-123-abc1234)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false
      release-notes:
        description: 'Additional release notes (optional)'
        required: false
        type: string

permissions:
  contents: write
  actions: read

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CI: true

jobs:
  validate-and-release:
    name: Create Release v${{ inputs.version }}
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          6.0.x
          7.0.x
          8.0.x
          9.0.x

    - name: Validate version format
      run: |
        if ! [[ "${{ inputs.version }}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "‚ùå Error: Version must be in format x.y.z or x.y.z-prerelease"
          echo "Examples: 1.0.0, 1.2.3-beta.1, 2.0.0-rc.2"
          exit 1
        fi
        echo "‚úÖ Version format valid: ${{ inputs.version }}"

    - name: Check if tag already exists
      run: |
        if git tag -l | grep -q "^v${{ inputs.version }}$"; then
          echo "‚ùå Error: Tag v${{ inputs.version }} already exists"
          echo "Existing tags:"
          git tag -l | grep "^v" | sort -V | tail -10
          exit 1
        fi
        echo "‚úÖ Tag v${{ inputs.version }} is available"

    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: herocrypt-${{ inputs.build-number }}
        path: ./release-artifacts

    - name: Verify artifacts
      run: |
        echo "üì¶ Verifying downloaded artifacts..."
        ls -lah ./release-artifacts/

        # Check for required files
        if [ ! -f ./release-artifacts/build-manifest.json ]; then
          echo "‚ùå Error: build-manifest.json not found"
          exit 1
        fi

        NUPKG_COUNT=$(find ./release-artifacts -name "*.nupkg" -not -name "*.symbols.nupkg" | wc -l)
        SNUPKG_COUNT=$(find ./release-artifacts -name "*.snupkg" | wc -l)

        echo "Found $NUPKG_COUNT .nupkg files"
        echo "Found $SNUPKG_COUNT .snupkg files"

        if [ "$NUPKG_COUNT" -eq 0 ]; then
          echo "‚ùå Error: No .nupkg files found"
          exit 1
        fi

        echo "‚úÖ Artifacts verified"

        # Display build manifest
        echo "üìã Build Manifest:"
        cat ./release-artifacts/build-manifest.json

    - name: Update version in codebase
      run: |
        echo "üìù Updating version to ${{ inputs.version }}"

        # Update Directory.Build.props
        sed -i "s|<VersionPrefix>.*</VersionPrefix>|<VersionPrefix>${{ inputs.version }}</VersionPrefix>|g" Directory.Build.props

        # Update AssemblyVersion (major.minor.0 for binary compatibility)
        VERSION_MAJOR_MINOR=$(echo "${{ inputs.version }}" | sed 's/-.*//' | cut -d'.' -f1,2)
        sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>${VERSION_MAJOR_MINOR}.0</AssemblyVersion>|g" Directory.Build.props

        echo "‚úÖ Version updated in Directory.Build.props"

        # Show changes
        git diff Directory.Build.props

    - name: Run RFC compliance tests
      run: |
        echo "üß™ Running RFC compliance tests..."
        dotnet restore
        dotnet build --configuration Release
        dotnet test --filter "Category=Compliance" --configuration Release --logger "console;verbosity=detailed" --no-build

        echo "‚úÖ RFC compliance tests passed"

    - name: Run critical security tests
      run: |
        echo "üîí Running security validation tests..."
        dotnet test --filter "Category=Security|Category=Critical" --configuration Release --logger "console;verbosity=detailed" --no-build

        echo "‚úÖ Security tests passed"

    - name: Commit version update
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add Directory.Build.props
        git commit -m "Release v${{ inputs.version }}

        Build Number: ${{ inputs.build-number }}
        Released by: ${{ github.actor }}
        Release Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        " || echo "No changes to commit"

    - name: Create git tag
      run: |
        git tag -a "v${{ inputs.version }}" -m "Release v${{ inputs.version }}

        Build Number: ${{ inputs.build-number }}
        Released by: ${{ github.actor }}
        Release Date: $(date -u +%Y-%m-%dT%H:%M:%SZ)
        "
        echo "‚úÖ Created tag v${{ inputs.version }}"

    - name: Push changes and tag
      run: |
        git push origin HEAD:${{ github.ref_name }}
        git push origin v${{ inputs.version }}
        echo "‚úÖ Pushed version update and tag"

    - name: Generate release notes
      id: release-notes
      run: |
        # Read build manifest
        BUILD_COMMIT=$(jq -r '.commitHash' ./release-artifacts/build-manifest.json)
        BUILD_DATE=$(jq -r '.buildDate' ./release-artifacts/build-manifest.json)
        BUILD_ACTOR=$(jq -r '.actor' ./release-artifacts/build-manifest.json)

        # Create release notes
        cat > release-notes.md << 'EOF'
        ## HeroCrypt v${{ inputs.version }}

        ### üéâ What's New
        ${{ inputs.release-notes }}

        ### üì¶ Package Information
        - **Version:** ${{ inputs.version }}
        - **Build Number:** ${{ inputs.build-number }}
        - **Build Date:** $(date -u +%Y-%m-%d)
        - **NuGet:** [HeroCrypt ${{ inputs.version }}](https://www.nuget.org/packages/HeroCrypt/${{ inputs.version }})

        ### üîí Security & Compliance
        - ‚úÖ Argon2 (RFC 9106): Fully compliant with test vectors
        - ‚úÖ Blake2b (RFC 7693): Fully compliant
        - ‚úÖ ChaCha20-Poly1305 (RFC 8439): Fully compliant
        - ‚úÖ Curve25519 (RFC 7748): Fully compliant
        - ‚úÖ All security tests passed

        ### üéØ Target Frameworks
        - .NET Standard 2.0
        - .NET 6.0, 7.0, 8.0, 9.0

        ### üì• Installation
        ```bash
        dotnet add package HeroCrypt --version ${{ inputs.version }}
        ```

        Or via Package Manager:
        ```powershell
        Install-Package HeroCrypt -Version ${{ inputs.version }}
        ```

        ### üîó Links
        - [Documentation](https://github.com/${{ github.repository }})
        - [Release Notes](https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }})
        - [NuGet Package](https://www.nuget.org/packages/HeroCrypt/${{ inputs.version }})

        ### üìä Build Details
        - **Build Commit:** ${BUILD_COMMIT}
        - **Built By:** ${BUILD_ACTOR}
        - **Released By:** ${{ github.actor }}

        ---

        ü§ñ Generated with [Claude Code](https://claude.com/claude-code)
        EOF

        cat release-notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: v${{ inputs.version }}
        name: HeroCrypt v${{ inputs.version }}
        body_path: release-notes.md
        prerelease: ${{ inputs.prerelease }}
        draft: false
        files: |
          ./release-artifacts/*.nupkg
          ./release-artifacts/*.snupkg
          ./release-artifacts/build-manifest.json
        fail_on_unmatched_files: true

    - name: Release summary
      run: |
        echo "# ‚úÖ Release Created Successfully" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Release Information" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** v${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Number:** ${{ inputs.build-number }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Pre-release:** ${{ inputs.prerelease }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Released by:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release Date:** $(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Links" >> $GITHUB_STEP_SUMMARY
        echo "- üîó [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "- üì¶ [NuGet Package](https://www.nuget.org/packages/HeroCrypt/${{ inputs.version }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "The **Publish to NuGet** workflow will automatically trigger to publish this release to NuGet.org" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ All RFC compliance tests passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ All security tests passed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ Git tag created and pushed" >> $GITHUB_STEP_SUMMARY
        echo "‚úÖ GitHub release published" >> $GITHUB_STEP_SUMMARY

    - name: Trigger notification
      if: success()
      run: |
        echo "üéâ Release v${{ inputs.version }} created successfully!"
        echo "üì¶ GitHub Release: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.version }}"
        echo "‚è≥ NuGet publishing workflow will start automatically..."
