name: Emergency Rollback

on:
  workflow_dispatch:
    inputs:
      rollback_to_version:
        description: 'Version to rollback to (e.g., 1.2.0)'
        required: true
        type: string
      reason:
        description: 'Reason for rollback'
        required: true
        type: string
      notify_team:
        description: 'Notify team of rollback'
        required: false
        type: boolean
        default: true

permissions:
  contents: write
  packages: write
  actions: write

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CI: true

jobs:
  validate-rollback:
    name: Validate Rollback Request
    runs-on: ubuntu-latest
    environment:
      name: emergency-rollback
      url: https://github.com/${{ github.repository }}/releases/tag/v${{ inputs.rollback_to_version }}

    outputs:
      rollback_valid: ${{ steps.validate.outputs.valid }}
      target_version: ${{ steps.validate.outputs.target_version }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Validate rollback target
      id: validate
      run: |
        TARGET_VERSION="${{ inputs.rollback_to_version }}"

        # Check if target version exists as a git tag
        if git tag -l | grep -q "^v${TARGET_VERSION}$"; then
          echo "‚úÖ Target version v${TARGET_VERSION} found in git history"
          echo "valid=true" >> $GITHUB_OUTPUT
          echo "target_version=${TARGET_VERSION}" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Target version v${TARGET_VERSION} not found in git history"
          echo "Available versions:"
          git tag -l | grep "^v" | sort -V | tail -10
          echo "valid=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Check if target version exists on NuGet
        echo "Checking NuGet package availability..."
        NUGET_CHECK=$(curl -s "https://api.nuget.org/v3-flatcontainer/herocrypt/index.json" | jq -r ".versions[]" | grep "^${TARGET_VERSION}$" || echo "")

        if [ -n "$NUGET_CHECK" ]; then
          echo "‚úÖ Target version ${TARGET_VERSION} exists on NuGet"
        else
          echo "‚ö†Ô∏è  Target version ${TARGET_VERSION} not found on NuGet"
          echo "This may be a pre-release or the package was never published"
        fi

    - name: Log rollback request
      run: |
        echo "üö® EMERGENCY ROLLBACK INITIATED"
        echo "Target Version: v${{ inputs.rollback_to_version }}"
        echo "Reason: ${{ inputs.reason }}"
        echo "Initiated by: ${{ github.actor }}"
        echo "Timestamp: $(date -u)"

  execute-rollback:
    name: Execute Rollback
    runs-on: ubuntu-latest
    needs: validate-rollback
    if: needs.validate-rollback.outputs.rollback_valid == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 9.0.x

    - name: Checkout target version
      run: |
        TARGET_VERSION="${{ needs.validate-rollback.outputs.target_version }}"
        git checkout "v${TARGET_VERSION}"

        echo "üìç Checked out version: v${TARGET_VERSION}"
        echo "Commit: $(git rev-parse HEAD)"
        echo "Date: $(git show -s --format=%ci HEAD)"

    - name: Create rollback branch
      run: |
        ROLLBACK_BRANCH="rollback/v${{ needs.validate-rollback.outputs.target_version }}-$(date +%s)"
        git checkout -b "${ROLLBACK_BRANCH}"
        git push origin "${ROLLBACK_BRANCH}"

        echo "Created rollback branch: ${ROLLBACK_BRANCH}"
        echo "ROLLBACK_BRANCH=${ROLLBACK_BRANCH}" >> $GITHUB_ENV

    - name: Update version to rollback target
      run: |
        TARGET_VERSION="${{ needs.validate-rollback.outputs.target_version }}"

        # Update Directory.Build.props with rollback version
        sed -i "s|<VersionPrefix>.*</VersionPrefix>|<VersionPrefix>${TARGET_VERSION}-rollback</VersionPrefix>|g" Directory.Build.props

        # Update AssemblyVersion
        VERSION_MAJOR_MINOR=$(echo "${TARGET_VERSION}" | cut -d'.' -f1,2)
        sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>${VERSION_MAJOR_MINOR}.0</AssemblyVersion>|g" Directory.Build.props

        echo "Updated version to ${TARGET_VERSION}-rollback"

    - name: Build and validate rollback version
      run: |
        dotnet restore
        dotnet build --configuration Release

        # Run critical tests to ensure rollback version is functional
        dotnet test --filter "Category=Critical|Category=Compliance" --configuration Release --logger "console;verbosity=minimal"

        echo "‚úÖ Rollback version builds and passes critical tests"

    - name: Package rollback version
      run: |
        dotnet pack --configuration Release --no-build --output ./rollback-artifacts

        echo "üì¶ Rollback package created"
        ls -la ./rollback-artifacts/

    - name: Commit rollback changes
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add Directory.Build.props
        git commit -m "Emergency rollback to v${{ needs.validate-rollback.outputs.target_version }}

        Reason: ${{ inputs.reason }}
        Initiated by: ${{ github.actor }}
        Original commit: $(git rev-parse v${{ needs.validate-rollback.outputs.target_version }})
        "

        git push origin "${ROLLBACK_BRANCH}"

    - name: Create rollback release
      run: |
        TARGET_VERSION="${{ needs.validate-rollback.outputs.target_version }}"
        ROLLBACK_VERSION="${TARGET_VERSION}-rollback-$(date +%Y%m%d-%H%M%S)"

        # Create release notes
        cat > rollback_notes.md << EOF
        # üö® Emergency Rollback Release

        This is an emergency rollback to version **v${TARGET_VERSION}**.

        ## Rollback Details
        - **Target Version**: v${TARGET_VERSION}
        - **Rollback Version**: ${ROLLBACK_VERSION}
        - **Reason**: ${{ inputs.reason }}
        - **Initiated by**: ${{ github.actor }}
        - **Timestamp**: $(date -u)

        ## What Changed
        This release reverts all changes made after v${TARGET_VERSION} due to critical issues.

        ## Installation
        \`\`\`bash
        dotnet add package HeroCrypt --version ${ROLLBACK_VERSION}
        \`\`\`

        ## Critical Actions Required
        - [ ] Update all production deployments immediately
        - [ ] Notify all downstream consumers
        - [ ] Begin investigation of root cause
        - [ ] Plan forward fix for next release
        EOF

        # Create GitHub release
        gh release create "v${ROLLBACK_VERSION}" \
          --title "üö® Emergency Rollback: v${ROLLBACK_VERSION}" \
          --notes-file rollback_notes.md \
          --prerelease \
          ./rollback-artifacts/*.nupkg

        echo "ROLLBACK_VERSION=${ROLLBACK_VERSION}" >> $GITHUB_ENV

    - name: Publish rollback to NuGet
      run: |
        echo "Publishing rollback version to NuGet..."
        dotnet nuget push ./rollback-artifacts/*.nupkg \
          --api-key "${{ secrets.NUGET_API_KEY }}" \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Create rollback summary
      run: |
        echo "üö® EMERGENCY ROLLBACK COMPLETED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Target Version**: v${{ needs.validate-rollback.outputs.target_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Rollback Version**: ${ROLLBACK_VERSION}" >> $GITHUB_STEP_SUMMARY
        echo "**Reason**: ${{ inputs.reason }}" >> $GITHUB_STEP_SUMMARY
        echo "**Initiated by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Actions" >> $GITHUB_STEP_SUMMARY
        echo "1. ‚úÖ Rollback version published to NuGet" >> $GITHUB_STEP_SUMMARY
        echo "2. ‚úÖ GitHub release created" >> $GITHUB_STEP_SUMMARY
        echo "3. üîÑ Update production deployments immediately" >> $GITHUB_STEP_SUMMARY
        echo "4. üì¢ Notify team and downstream consumers" >> $GITHUB_STEP_SUMMARY
        echo "5. üîç Begin root cause analysis" >> $GITHUB_STEP_SUMMARY

  notify-rollback:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [validate-rollback, execute-rollback]
    if: always() && inputs.notify_team

    steps:
    - name: Notify rollback status
      run: |
        if [ "${{ needs.execute-rollback.result }}" == "success" ]; then
          echo "üö® EMERGENCY ROLLBACK COMPLETED SUCCESSFULLY"
          echo "Version: v${{ needs.validate-rollback.outputs.target_version }}"
          echo "Reason: ${{ inputs.reason }}"
          echo "NuGet package has been published and is available for deployment"
        else
          echo "‚ùå EMERGENCY ROLLBACK FAILED"
          echo "Manual intervention required immediately"
          echo "Check workflow logs: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        fi