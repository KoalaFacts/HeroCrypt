name: Hotfix Release

on:
  workflow_dispatch:
    inputs:
      base_version:
        description: 'Base version to apply hotfix to (e.g., 1.2.0)'
        required: true
        type: string
      severity:
        description: 'Severity of the issue being fixed'
        required: true
        type: choice
        options:
          - critical
          - high
          - medium
        default: 'critical'
      issue_description:
        description: 'Brief description of the issue being fixed'
        required: true
        type: string
      skip_tests:
        description: 'Skip non-critical tests (emergency only)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  packages: write
  actions: write

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  CI: true

jobs:
  validate-hotfix:
    name: Validate Hotfix Request
    runs-on: ubuntu-latest
    environment:
      name: ${{ inputs.severity == 'critical' && 'emergency-hotfix' || 'hotfix' }}

    outputs:
      base_version: ${{ steps.validate.outputs.base_version }}
      hotfix_version: ${{ steps.validate.outputs.hotfix_version }}
      base_tag_exists: ${{ steps.validate.outputs.base_tag_exists }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0

    - name: Validate hotfix request
      id: validate
      run: |
        BASE_VERSION="${{ inputs.base_version }}"

        # Validate version format
        if ! [[ "${BASE_VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
          echo "‚ùå Invalid version format. Expected: x.y.z"
          exit 1
        fi

        # Check if base version tag exists
        if git tag -l | grep -q "^v${BASE_VERSION}$"; then
          echo "‚úÖ Base version v${BASE_VERSION} found"
          echo "base_tag_exists=true" >> $GITHUB_OUTPUT
        else
          echo "‚ùå Base version v${BASE_VERSION} not found"
          echo "Available versions:"
          git tag -l | grep "^v" | sort -V | tail -10
          echo "base_tag_exists=false" >> $GITHUB_OUTPUT
          exit 1
        fi

        # Calculate hotfix version
        IFS='.' read -r MAJOR MINOR PATCH <<< "${BASE_VERSION}"

        # Find existing hotfix versions for this base
        EXISTING_HOTFIXES=$(git tag -l | grep "^v${MAJOR}\.${MINOR}\.${PATCH}-hotfix\." | wc -l)
        HOTFIX_NUMBER=$((EXISTING_HOTFIXES + 1))
        HOTFIX_VERSION="${MAJOR}.${MINOR}.${PATCH}-hotfix.${HOTFIX_NUMBER}"

        echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
        echo "hotfix_version=${HOTFIX_VERSION}" >> $GITHUB_OUTPUT

        echo "üìä Hotfix Details:"
        echo "  Base Version: v${BASE_VERSION}"
        echo "  Hotfix Version: v${HOTFIX_VERSION}"
        echo "  Severity: ${{ inputs.severity }}"
        echo "  Issue: ${{ inputs.issue_description }}"

  create-hotfix:
    name: Create Hotfix Release
    runs-on: ubuntu-latest
    needs: validate-hotfix
    if: needs.validate-hotfix.outputs.base_tag_exists == 'true'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup .NET
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: 9.0.x

    - name: Create hotfix branch
      run: |
        BASE_VERSION="${{ needs.validate-hotfix.outputs.base_version }}"
        HOTFIX_VERSION="${{ needs.validate-hotfix.outputs.hotfix_version }}"

        # Create and checkout hotfix branch from base version tag
        HOTFIX_BRANCH="hotfix/v${HOTFIX_VERSION}"
        git checkout "v${BASE_VERSION}"
        git checkout -b "${HOTFIX_BRANCH}"

        echo "HOTFIX_BRANCH=${HOTFIX_BRANCH}" >> $GITHUB_ENV
        echo "HOTFIX_VERSION=${HOTFIX_VERSION}" >> $GITHUB_ENV

        echo "üîß Created hotfix branch: ${HOTFIX_BRANCH}"
        echo "üìç Based on: v${BASE_VERSION}"

    - name: Update version for hotfix
      run: |
        HOTFIX_VERSION="${{ needs.validate-hotfix.outputs.hotfix_version }}"

        # Update Directory.Build.props with hotfix version
        sed -i "s|<VersionPrefix>.*</VersionPrefix>|<VersionPrefix>${HOTFIX_VERSION}</VersionPrefix>|g" Directory.Build.props

        # Update AssemblyVersion (keep base version for compatibility)
        BASE_VERSION="${{ needs.validate-hotfix.outputs.base_version }}"
        VERSION_MAJOR_MINOR=$(echo "${BASE_VERSION}" | cut -d'.' -f1,2)
        sed -i "s|<AssemblyVersion>.*</AssemblyVersion>|<AssemblyVersion>${VERSION_MAJOR_MINOR}.0</AssemblyVersion>|g" Directory.Build.props

        echo "Updated version to ${HOTFIX_VERSION}"

    - name: Apply hotfix changes
      run: |
        echo "üîß Current directory contains the hotfix changes"
        echo "The hotfix should already be applied in the current workspace"
        echo "If changes are in a different branch, they need to be cherry-picked manually"

        # Show current changes
        echo "Current changes in workspace:"
        git status --porcelain || echo "No changes detected"

        # Note: In a real scenario, you would either:
        # 1. Cherry-pick commits from main branch: git cherry-pick <commit-sha>
        # 2. Apply patches manually
        # 3. Have the changes already staged before running this workflow

    - name: Restore and build
      run: |
        dotnet restore

        echo "üèóÔ∏è Building hotfix version..."
        dotnet build --configuration Release --no-restore

    - name: Run critical tests
      if: inputs.skip_tests != true
      run: |
        echo "üß™ Running critical tests..."
        dotnet test --filter "Category=Critical|Category=Compliance" \
          --configuration Release --no-build \
          --logger "console;verbosity=minimal"

    - name: Run security validation
      if: inputs.severity == 'critical'
      run: |
        echo "üîí Running security validation for critical hotfix..."
        dotnet test --filter "Category=Security" \
          --configuration Release --no-build \
          --logger "console;verbosity=minimal"

    - name: Package hotfix
      run: |
        echo "üì¶ Creating hotfix package..."
        dotnet pack --configuration Release --no-build --output ./hotfix-artifacts

        ls -la ./hotfix-artifacts/

    - name: Sign hotfix packages
      if: ${{ secrets.SIGNING_CERTIFICATE_BASE64 && secrets.SIGNING_CERTIFICATE_PASSWORD }}
      run: |
        echo "‚úçÔ∏è Signing hotfix packages..."
        dotnet tool install --global NuGet.CommandLine

        # Decode certificate from base64
        echo "${{ secrets.SIGNING_CERTIFICATE_BASE64 }}" | base64 -d > signing-cert.p12

        for package in ./hotfix-artifacts/*.nupkg; do
          echo "Signing $package"
          nuget sign "$package" \
            -CertificatePath signing-cert.p12 \
            -CertificatePassword "${{ secrets.SIGNING_CERTIFICATE_PASSWORD }}" \
            -Timestamper http://timestamp.digicert.com
        done

        # Clean up certificate file
        rm -f signing-cert.p12

    - name: Generate SBOM for hotfix
      run: |
        dotnet tool install --global Microsoft.Sbom.Tool
        sbom-tool generate \
          -b ./hotfix-artifacts \
          -bc ./src \
          -pn HeroCrypt \
          -pv ${{ needs.validate-hotfix.outputs.hotfix_version }} \
          -ps BeingCiteable \
          -nsb https://github.com/BeingCiteable/HeroCrypt

    - name: Commit hotfix
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

        git add .
        git commit -m "Hotfix v${{ needs.validate-hotfix.outputs.hotfix_version }}: ${{ inputs.issue_description }}

        Severity: ${{ inputs.severity }}
        Base version: v${{ needs.validate-hotfix.outputs.base_version }}
        Applied by: ${{ github.actor }}

        Issue: ${{ inputs.issue_description }}
        " || echo "No changes to commit"

        git tag "v${{ needs.validate-hotfix.outputs.hotfix_version }}"

    - name: Push hotfix branch and tag
      run: |
        git push origin "${HOTFIX_BRANCH}"
        git push origin "v${{ needs.validate-hotfix.outputs.hotfix_version }}"

    - name: Create hotfix release notes
      run: |
        cat > hotfix_release_notes.md << EOF
        # üö® Hotfix Release v${{ needs.validate-hotfix.outputs.hotfix_version }}

        This is a **${{ inputs.severity }}** severity hotfix for HeroCrypt.

        ## Issue Fixed
        ${{ inputs.issue_description }}

        ## Release Details
        - **Base Version**: v${{ needs.validate-hotfix.outputs.base_version }}
        - **Hotfix Version**: v${{ needs.validate-hotfix.outputs.hotfix_version }}
        - **Severity**: ${{ inputs.severity }}
        - **Applied by**: ${{ github.actor }}

        ## Installation
        \`\`\`bash
        dotnet add package HeroCrypt --version ${{ needs.validate-hotfix.outputs.hotfix_version }}
        \`\`\`

        ## Urgency
        EOF

        if [ "${{ inputs.severity }}" == "critical" ]; then
          echo "‚ö†Ô∏è **IMMEDIATE ACTION REQUIRED**: This hotfix addresses a critical security or functionality issue. Update immediately." >> hotfix_release_notes.md
        elif [ "${{ inputs.severity }}" == "high" ]; then
          echo "‚ö†Ô∏è **UPDATE RECOMMENDED**: This hotfix addresses a high-priority issue. Update as soon as possible." >> hotfix_release_notes.md
        else
          echo "‚ÑπÔ∏è **UPDATE AVAILABLE**: This hotfix addresses a medium-priority issue. Update at your convenience." >> hotfix_release_notes.md
        fi

        echo "" >> hotfix_release_notes.md
        echo "## Compatibility" >> hotfix_release_notes.md
        echo "This hotfix maintains full API compatibility with v${{ needs.validate-hotfix.outputs.base_version }}." >> hotfix_release_notes.md

    - name: Create GitHub release
      run: |
        PRERELEASE_FLAG=""
        if [ "${{ inputs.severity }}" != "critical" ]; then
          PRERELEASE_FLAG="--prerelease"
        fi

        gh release create "v${{ needs.validate-hotfix.outputs.hotfix_version }}" \
          --title "üö® Hotfix: v${{ needs.validate-hotfix.outputs.hotfix_version }}" \
          --notes-file hotfix_release_notes.md \
          ${PRERELEASE_FLAG} \
          ./hotfix-artifacts/*.nupkg

    - name: Publish to NuGet
      run: |
        echo "üì§ Publishing hotfix to NuGet..."
        dotnet nuget push ./hotfix-artifacts/*.nupkg \
          --api-key "${{ secrets.NUGET_API_KEY }}" \
          --source https://api.nuget.org/v3/index.json \
          --skip-duplicate

    - name: Hotfix completion notification
      run: |
        SEVERITY_EMOJI="üö®"
        if [ "${{ inputs.severity }}" == "high" ]; then
          SEVERITY_EMOJI="‚ö†Ô∏è"
        elif [ "${{ inputs.severity }}" == "medium" ]; then
          SEVERITY_EMOJI="‚ÑπÔ∏è"
        fi

        echo "${SEVERITY_EMOJI} HOTFIX RELEASED: v${{ needs.validate-hotfix.outputs.hotfix_version }}"
        echo "Issue: ${{ inputs.issue_description }}"
        echo "üì¶ NuGet: https://www.nuget.org/packages/HeroCrypt/${{ needs.validate-hotfix.outputs.hotfix_version }}"
        echo "üîó GitHub: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-hotfix.outputs.hotfix_version }}"

    - name: Create summary
      run: |
        echo "üö® HOTFIX RELEASE COMPLETED" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Hotfix Version**: v${{ needs.validate-hotfix.outputs.hotfix_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Base Version**: v${{ needs.validate-hotfix.outputs.base_version }}" >> $GITHUB_STEP_SUMMARY
        echo "**Severity**: ${{ inputs.severity }}" >> $GITHUB_STEP_SUMMARY
        echo "**Issue**: ${{ inputs.issue_description }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Links" >> $GITHUB_STEP_SUMMARY
        echo "- üì¶ [NuGet Package](https://www.nuget.org/packages/HeroCrypt/${{ needs.validate-hotfix.outputs.hotfix_version }})" >> $GITHUB_STEP_SUMMARY
        echo "- üîó [GitHub Release](https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-hotfix.outputs.hotfix_version }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        if [ "${{ inputs.severity }}" == "critical" ]; then
          echo "### ‚ö†Ô∏è CRITICAL ACTION REQUIRED" >> $GITHUB_STEP_SUMMARY
          echo "1. Update all production deployments immediately" >> $GITHUB_STEP_SUMMARY
          echo "2. Notify all downstream consumers" >> $GITHUB_STEP_SUMMARY
          echo "3. Monitor for any issues" >> $GITHUB_STEP_SUMMARY
        fi