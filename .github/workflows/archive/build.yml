name: Build Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  workflow_dispatch:

# Cancel in-progress builds when a new commit is pushed to the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  DOTNET_NOLOGO: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  NUGET_XMLDOC_MODE: skip
  CI: true
  # Project paths
  MAIN_PROJECT: src/HeroCrypt/HeroCrypt.csproj
  TEST_PROJECTS: tests/**/*.csproj
  LATEST_SDK: 9.0.x

jobs:
  test:
    name: Test ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        include:
          # Primary test targets - full testing on latest frameworks
          - { name: "net9.0 on Ubuntu", os: ubuntu-latest, framework: net9.0, sdk: 9.0.x, runTests: true }
          - { name: "net9.0 on Windows", os: windows-latest, framework: net9.0, sdk: 9.0.x, runTests: true }
          - { name: "net9.0 on macOS", os: macos-latest, framework: net9.0, sdk: 9.0.x, runTests: true }
          - { name: "net8.0 on Ubuntu", os: ubuntu-latest, framework: net8.0, sdk: 8.0.x, runTests: true }
          - { name: "net8.0 on Windows", os: windows-latest, framework: net8.0, sdk: 8.0.x, runTests: true }
          - { name: "net8.0 on macOS", os: macos-latest, framework: net8.0, sdk: 8.0.x, runTests: true }

          # Compilation verification only for older frameworks (Ubuntu only)
          - { name: "net7.0 on ubuntu", os: ubuntu-latest, framework: net7.0, sdk: 7.0.x, runTests: false }
          - { name: "net6.0 on ubuntu", os: ubuntu-latest, framework: net6.0, sdk: 6.0.x, runTests: false }
          - { name: "netstandard2.0 on ubuntu", os: ubuntu-latest, framework: netstandard2.0, sdk: 8.0.x, runTests: false }

    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: Setup .NET SDKs
      uses: actions/setup-dotnet@v5
      with:
        dotnet-version: |
          ${{ env.LATEST_SDK }}
          ${{ matrix.sdk }}

    - name: Build library for ${{ matrix.framework }}
      if: matrix.runTests != true
      run: dotnet build ${{ env.MAIN_PROJECT }} /p:Configuration=Release /p:TargetFrameworks=${{ matrix.framework }}
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Build solution for ${{ matrix.framework }}
      if: matrix.runTests == true
      run: dotnet build /p:Configuration=Release /p:TargetFrameworks=${{ matrix.framework }}
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Run tests (excluding slow)
      if: matrix.runTests == true
      run: dotnet test /p:TargetFrameworks=${{ matrix.framework }} /p:Configuration=Release --filter "Category!=Slow" --logger "trx;LogFileName=test-results-${{ matrix.framework }}.trx" --collect:"XPlat Code Coverage" -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=cobertura
      env:
        CI: true
        TargetFramework: ${{ matrix.framework }}

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always() && matrix.runTests == true
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.framework }}
        path: '**/test-results-*.trx'
